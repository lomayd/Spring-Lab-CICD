# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Build with Gradle Wrapper
      run: ./gradlew build --exclude-task test

    # 1. 인스턴스에 JDK 직접 설치, 서버 직접 실행

    #- name: Copy jar file to remote
    #  uses: appleboy/scp-action@master
    #  with:
    #    username: ${{ secrets.USERNAME }}
    #    host: ${{ secrets.HOST }}
    #    key: ${{ secrets.PRIVATE_KEY }}
    #    source: "./build/libs/*.jar"
    #    target: "/home/ubuntu/cicd"
    #    strip_components: 2
    #- name: Copy deploy script file to remote
    #  uses: appleboy/scp-action@master
    #  with:
    #    username: ${{ secrets.USERNAME }}
    #    host: ${{ secrets.HOST }}
    #    key: ${{ secrets.PRIVATE_KEY }}
    #    source: "./deploy.sh"
    #    target: "/home/ubuntu/cicd"
    #- name: Execute deploy script
    #  uses: appleboy/ssh-action@master
    #  with:
    #    username: ${{ secrets.USERNAME }}
    #    host: ${{ secrets.HOST }}
    #    key: ${{ secrets.PRIVATE_KEY }}
    #    script_stop: true
    #    script: |
    #      chmod +x /home/ubuntu/cicd/deploy.sh
    #      sh /home/ubuntu/cicd/deploy.sh

    # 2. 인스턴스에 Docker 이용해 JDK 설치, 서버 실행

    - name: Docker build
      run: |
        docker login -u ${{ secrets.DOCKER_ID }} -p ${{ secrets.DOCKER_PWD }}
        docker build -t lomayd/spring-lab-cicd .
        docker push lomayd/spring-lab-cicd

    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        script: |
          docker pull lomayd/spring-lab-cicd
          docker stop server
          docker run -d --rm --name server -p 8080:8080 lomayd/spring-lab-cicd